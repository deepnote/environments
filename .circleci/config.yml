version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1.1
  docker: circleci/docker@2.8

commands:
  setup_buildkit_builder:
    steps:
      - run:
          name: Setup BuildKit builder
          command: |
            docker buildx create \
              --name custom-builder \
              --use \
              --driver docker-container \
  docker_login:
    steps:
      - aws-cli/setup:
          role_arn: arn:aws:iam::978928340082:role/CircleCI
          profile_name: production
          role_session_name: "circleci-session"
          session_duration: "1800"
      - run:
          name: Docker and ECR login
          command: |
            docker login --username $DOCKER_LOGIN --password $DOCKER_PASSWORD
            aws ecr get-login-password --region us-east-1 --profile production | \
              docker login --username AWS --password-stdin 978928340082.dkr.ecr.us-east-1.amazonaws.com
jobs:
  build-and-push-base:
    machine:
      image: ubuntu-2404:current
    steps:
      - checkout
      - docker_login
      - setup_buildkit_builder
      - run:
          name: Build and push base image
          command: |
            REPOSITORY="deepnote/python"
            TAG="base"
            TAG_SUFFIX="${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}"
            docker buildx build \
              --file=./python/base/Dockerfile.base \
              --tag=978928340082.dkr.ecr.us-east-1.amazonaws.com/${REPOSITORY}:${TAG}${TAG_SUFFIX} \
              --tag=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX} \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}-buildcache \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX}-buildcache \
              --cache-to type=registry,ref=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX}-buildcache,mode=max,image-manifest=true,oci-mediatypes=true \
              --progress plain \
              --platform linux/amd64 \
              --provenance=false \
              --sbom=false \
              --output type=registry,push=true \
              ./python/base

  build-and-push-python:
    machine:
      image: ubuntu-2404:current
    parameters:
      python-version:
        type: string
    environment:
      PYTHON_VERSION: << parameters.python-version >>
    steps:
      - checkout
      - docker_login
      - setup_buildkit_builder
      - run:
          name: Build and push python image
          command: |
            REPOSITORY="deepnote/python"
            TAG="${PYTHON_VERSION}"
            TAG_SUFFIX="${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}"

            docker buildx build \
              --file=./python/python/Dockerfile.python${PYTHON_VERSION} \
              --tag=978928340082.dkr.ecr.us-east-1.amazonaws.com/${REPOSITORY}:${TAG}${TAG_SUFFIX} \
              --tag=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX} \
              --build-arg CIRCLE_PULL_REQUEST=${CIRCLE_PULL_REQUEST} \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}-buildcache \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX}-buildcache \
              --cache-to type=registry,ref=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX}-buildcache,mode=max,image-manifest=true,oci-mediatypes=true \
              --progress plain \
              --platform linux/amd64 \
              --provenance=false \
              --sbom=false \
              --output type=registry,push=true \
              ./python/python

  build-and-push-python-datascience:
    machine:
      image: ubuntu-2404:current
    parameters:
      python-version:
        type: string
    environment:
      PYTHON_VERSION: << parameters.python-version >>
    steps:
      - checkout
      - docker_login
      - setup_buildkit_builder
      - run:
          name: Build and push python-datascience image
          command: |
            REPOSITORY="deepnote/python"
            TAG="${PYTHON_VERSION}-datascience"
            TAG_SUFFIX="${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}"
            docker buildx build \
              --file=./python/datascience/Dockerfile.datascience \
              --tag=978928340082.dkr.ecr.us-east-1.amazonaws.com/${REPOSITORY}:${TAG}${TAG_SUFFIX} \
              --tag=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX} \
              --build-arg CIRCLE_PULL_REQUEST=${CIRCLE_PULL_REQUEST} \
              --build-arg PYTHON_VERSION=${PYTHON_VERSION} \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}-buildcache \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX}-buildcache \
              --cache-to type=registry,ref=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX}-buildcache,mode=max,image-manifest=true,oci-mediatypes=true \
              --progress plain \
              --platform linux/amd64 \
              --provenance=false \
              --sbom=false \
              --output type=registry,push=true \
              ./python/datascience

  build-and-push-python-conda:
    machine:
      image: ubuntu-2404:current
    parameters:
      python-version:
        type: string
    environment:
      PYTHON_VERSION: << parameters.python-version >>
    steps:
      - checkout
      - docker_login
      - setup_buildkit_builder
      - run:
          name: Build and push python-conda image
          command: |
            REPOSITORY="deepnote/python"
            TAG="${PYTHON_VERSION}-conda"
            TAG_SUFFIX="${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}"
            docker buildx build \
              --file=./python/conda/Dockerfile.conda \
              --tag=978928340082.dkr.ecr.us-east-1.amazonaws.com/${REPOSITORY}:${TAG}${TAG_SUFFIX} \
              --tag=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX} \
              --build-arg CIRCLE_PULL_REQUEST=${CIRCLE_PULL_REQUEST} \
              --build-arg PYTHON_VERSION=${PYTHON_VERSION} \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}-buildcache \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX}-buildcache \
              --cache-to type=registry,ref=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX}-buildcache,mode=max,image-manifest=true,oci-mediatypes=true \
              --progress plain \
              --platform linux/amd64 \
              --provenance=false \
              --sbom=false \
              --output type=registry,push=true \
              ./python/conda

  build-and-push-ir:
    machine:
      image: ubuntu-2404:current
    parameters:
      r-version:
        type: string
    environment:
      R_VERSION: << parameters.r-version >>
      PYTHON_VERSION: "3.9"
    steps:
      - checkout
      - docker_login
      - setup_buildkit_builder
      - run:
          name: Build and push ir image
          command: |
            REPOSITORY="deepnote/ir"
            TAG="${R_VERSION}${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}"
            docker buildx build \
              --file=./ir/ir-base/Dockerfile.ir \
              --tag=978928340082.dkr.ecr.us-east-1.amazonaws.com/${REPOSITORY}:${TAG} \
              --tag=docker.io/${REPOSITORY}:${TAG} \
              --build-arg R_VERSION=${R_VERSION} \
              --build-arg PYTHON_VERSION=${PYTHON_VERSION} \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}-buildcache,mode=max \
              --cache-to type=registry,ref=docker.io/${REPOSITORY}:${TAG}-buildcache,mode=max,image-manifest=true,oci-mediatypes=true \
              --progress plain \
              --platform linux/amd64 \
              --provenance=false \
              --sbom=false \
              --output type=registry,push=true \
              ./ir/ir-base
  build-and-push-ir-with-libs:
    machine:
      image: ubuntu-2404:current
    parameters:
      r-version:
        type: string
    environment:
      R_VERSION: << parameters.r-version >>
      PYTHON_VERSION: "3.9"
    steps:
      - checkout
      - docker_login
      - setup_buildkit_builder
      - run:
          name: Build and push ir with datascience libraries
          command: |
            REPOSITORY="deepnote/ir-with-libs"
            TAG="${R_VERSION}${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}"
            docker buildx build \
              --file=./ir/ir-with-libs/Dockerfile.ir \
              --tag=978928340082.dkr.ecr.us-east-1.amazonaws.com/${REPOSITORY}:${TAG} \
              --tag=docker.io/${REPOSITORY}:${TAG} \
              --build-arg R_VERSION=${R_VERSION} \
              --build-arg CIRCLE_PULL_REQUEST=${CIRCLE_PULL_REQUEST} \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}-buildcache,mode=max \
              --cache-to type=registry,ref=docker.io/${REPOSITORY}:${TAG}-buildcache,mode=max,image-manifest=true,oci-mediatypes=true \
              --progress plain \
              --platform linux/amd64 \
              --provenance=false \
              --sbom=false \
              --output type=registry,push=true \
              ./ir/ir-with-libs

  build-and-push-gpu:
    machine:
      image: ubuntu-2404:current
    parameters:
      cuda-tag:
        type: string
      tf-version:
        type: string
      python-version:
        type: string
    environment:
      CUDA_TAG: << parameters.cuda-tag >>
      TF_VERSION: << parameters.tf-version >>
      PY_VERSION: << parameters.python-version >>
    steps:
      - checkout
      - docker_login
      - setup_buildkit_builder
      - run:
          name: Build and push python image
          command: |
            REPOSITORY="deepnote/tensorflow"
            TAG="${TF_VERSION}-gpu"
            TAG_SUFFIX="${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}"
            docker buildx build \
              --file=./gpu/Dockerfile \
              --tag=978928340082.dkr.ecr.us-east-1.amazonaws.com/${REPOSITORY}:${TAG}${TAG_SUFFIX} \
              --tag=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX} \
              --build-arg CUDA_IMAGE_TAG=${CUDA_TAG} \
              --build-arg TF_VERSION=${TF_VERSION} \
              --build-arg PYTHON_VER=${PY_VERSION} \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}-buildcache \
              --cache-from type=registry,ref=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX}-buildcache \
              --cache-to type=registry,ref=docker.io/${REPOSITORY}:${TAG}${TAG_SUFFIX}-buildcache,mode=max,image-manifest=true,oci-mediatypes=true \
              --progress plain \
              --platform linux/amd64 \
              --provenance=false \
              --sbom=false \
              --output type=registry,push=true \
              ./gpu

python-versions: &python-versions
  - "3.8"
  - "3.9"
  - "3.10"
  - "3.11"

r-versions: &r-versions
  - "4.0.4"
  - "4.2.0"

workflows:
  build:
    jobs:
      - build-and-push-base:
          name: Building the base image
      - build-and-push-python:
          name: Python << matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
          requires:
            - Building the base image
      - build-and-push-python-datascience:
          name: Python Datascience << matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
          requires:
            - Python << matrix.python-version >>
      - build-and-push-python-conda:
          name: Python Conda << matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
          requires:
            - Building the base image
      - build-and-push-ir:
          name: R << matrix.r-version >>
          matrix:
            parameters:
              r-version: *r-versions
          requires:
            - Python 3.9
      - build-and-push-ir-with-libs:
          name: R with libs << matrix.r-version >>
          matrix:
            parameters:
              r-version: *r-versions
          requires:
            - R << matrix.r-version >>

      - build-and-push-gpu:
          name: Tensorflow 2.9
          cuda-tag: "11.4.3-runtime-ubuntu20.04"
          tf-version: "2.9.1"
          python-version: "3.8"
      - build-and-push-gpu:
          name: Tensorflow 2.11
          cuda-tag: "11.4.3-runtime-ubuntu20.04"
          tf-version: "2.11.1"
          python-version: "3.10"
      - build-and-push-gpu:
          name: Tensorflow 2.15
          cuda-tag: "12.2.2-runtime-ubuntu22.04"
          tf-version: "2.15.0"
          python-version: "3.11"
