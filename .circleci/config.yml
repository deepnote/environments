version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1.1
  docker: circleci/docker@2.8


commands:
  split_python_version:
    steps:
      - run:
          name: Split python version
          command: |
            echo "export PYTHON_VERSION=$(echo $PYTHON_VERSION_PATCH | cut -d'.' -f1,2)" >> $BASH_ENV
            source $BASH_ENV
  setup_buildkit_builder:
    steps:
      - run:
          name: Setup BuildKit builder
          command: |
            docker buildx create \
              --name custom-builder \
              --use \
              --driver docker-container \
  setup_production_aws_profile:
    steps:
      - aws-cli/setup:
          role_arn: arn:aws:iam::978928340082:role/CircleCI
          profile_name: production
          role_session_name: "circleci-session"
          session_duration: "1800"
      - run:
          name: Set AWS Default Region to us-east-1
          command: |
            echo 'export AWS_REGION=us-east-1' >> "$BASH_ENV"
  push_soci_index:
    parameters:
      registry:
        type: string
      image:
        type: string
      tag:
        type: string
    steps:
      - run:
          name: Push SOCI index
          command: |
            LATEST_VERSION=`curl -w "%{redirect_url}" -fsS https://github.com/CloudSnorkel/standalone-soci-indexer/releases/latest | grep -oE "[^/]+$"`
            curl -fsSL https://github.com/CloudSnorkel/standalone-soci-indexer/releases/download/${LATEST_VERSION}/standalone-soci-indexer_Linux_x86_64.tar.gz | tar xz
            ./standalone-soci-indexer << parameters.registry >>/<< parameters.image >>:<< parameters.tag >>

jobs:
  build-and-push-base:
    machine:
      image: ubuntu-2404:current
    environment:
      OCI_IMAGE_REGISTRY: public.ecr.aws
      OCI_IMAGE_REPOSITORY: deepnote/python
    steps:
      - checkout
      - setup_production_aws_profile
      - setup_buildkit_builder
      - docker/build:
          step-name: Base python image (debian + apt-get deps)
          path: ./python/base
          dockerfile: Dockerfile.base
          extra_build_args: |
            --progress plain
            --platform linux/amd64
            --cache-from type=registry,ref=${OCI_IMAGE_REGISTRY}/${OCI_IMAGE_REPOSITORY}:base-buildcache,mode=max
            --cache-to type=registry,ref=${OCI_IMAGE_REGISTRY}/${OCI_IMAGE_REPOSITORY}:base-buildcache,mode=max
            --output type=registry,push=true
          registry: ${OCI_IMAGE_REGISTRY}
          image: ${OCI_IMAGE_REPOSITORY}
          tag: base${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}
  build-and-push-python:
    machine:
      image: ubuntu-2404:current
    parameters:
      python-version:
        type: string
    environment:
      PYTHON_VERSION_PATCH: << parameters.python-version >>
      OCI_IMAGE_REGISTRY: public.ecr.aws
      OCI_IMAGE_REPOSITORY: deepnote/python
    steps:
      - checkout
      - setup_production_aws_profile
      - split_python_version
      - setup_buildkit_builder
      - run:
          name: ECR login
          command: |
            aws ecr-public get-login-password --region us-east-1 --profile production | \
              docker login --username AWS --password-stdin public.ecr.aws/deepnote
      - docker/build:
          step-name: Python image
          path: ./python/base
          dockerfile: Dockerfile.python
          extra_build_args: |
            --build-arg CIRCLE_PULL_REQUEST=${CIRCLE_PULL_REQUEST}
            --build-arg PYTHON_VERSION=${PYTHON_VERSION}
            --build-arg PYTHON_VERSION_PATCH=${PYTHON_VERSION_PATCH}
            --progress plain
            --platform linux/amd64
            --cache-from type=registry,ref=${OCI_IMAGE_REGISTRY}/${OCI_IMAGE_REPOSITORY}:${PYTHON_VERSION}-buildcache,mode=max
            --cache-to type=registry,ref=${OCI_IMAGE_REGISTRY}/${OCI_IMAGE_REPOSITORY}:${PYTHON_VERSION}-buildcache,mode=max
            --output type=registry,push=true
          registry: ${OCI_IMAGE_REGISTRY}
          image: ${OCI_IMAGE_REPOSITORY}
          tag: ${PYTHON_VERSION}${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}
      - push_soci_index:
          registry: ${OCI_IMAGE_REGISTRY}
          image: ${OCI_IMAGE_REPOSITORY}
          tag: ${PYTHON_VERSION}${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}
  build-and-push-python-datascience:
    machine:
      image: ubuntu-2404:current
    parameters:
      python-version:
        type: string
    environment:
      PYTHON_VERSION_PATCH: << parameters.python-version >>
      OCI_IMAGE_REGISTRY: public.ecr.aws
      OCI_IMAGE_REPOSITORY: deepnote/python-datascience
    steps:
      - checkout
      - setup_production_aws_profile
      - split_python_version
      - setup_buildkit_builder
      - docker/build:
          step-name: Datascience Python image
          path: ./python/datascience
          docker-context: ./python/datascience
          dockerfile: Dockerfile.datascience
          extra_build_args: |
            --build-arg PYTHON_VERSION=${PYTHON_VERSION}
            --build-arg CIRCLE_PULL_REQUEST=${CIRCLE_PULL_REQUEST}
            --progress plain
            --platform linux/amd64
            --cache-from type=registry,ref=${OCI_IMAGE_REGISTRY}/${OCI_IMAGE_REPOSITORY}:${PYTHON_VERSION}-buildcache,mode=max
            --cache-to type=registry,ref=${OCI_IMAGE_REGISTRY}/${OCI_IMAGE_REPOSITORY}:${PYTHON_VERSION}-buildcache,mode=max
            --output type=registry,push=true
          registry: ${OCI_IMAGE_REGISTRY}
          image: ${OCI_IMAGE_REPOSITORY}
          tag: ${PYTHON_VERSION}${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}
      - push_soci_index:
          registry: ${OCI_IMAGE_REGISTRY}
          image: ${OCI_IMAGE_REPOSITORY}
          tag: ${PYTHON_VERSION}${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}
  build-and-push-gpu:
    machine:
      image: ubuntu-2404:current
    parameters:
      cuda-tag:
        type: string
      tf-version:
        type: string
      python-version:
        type: string
    environment:
      CUDA_TAG: << parameters.cuda-tag >>
      TF_VERSION: << parameters.tf-version >>
      PY_VERSION: << parameters.python-version >>
      OCI_IMAGE_REGISTRY: public.ecr.aws
      OCI_IMAGE_REPOSITORY: public.ecr.aws/deepnote/tensorflow
    steps:
      - checkout
      - setup_production_aws_profile
      - split_python_version
      - docker/build:
          step-name: Tensorflow GPU image
          path: ./gpu
          extra_build_args: "--build-arg CUDA_IMAGE_TAG=${CUDA_TAG} --build-arg TF_VERSION=${TF_VERSION} --build-arg PYTHON_VER=${PY_VERSION} --progress plain"
          registry: ${OCI_IMAGE_REGISTRY}
          image: ${OCI_IMAGE_REPOSITORY}
          tag: ${TF_VERSION}${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}-gpu
      - docker/push:
          registry: ${OCI_IMAGE_REGISTRY}
          image: ${OCI_IMAGE_REPOSITORY}
          tag: ${TF_VERSION}${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}-gpu
      - push_soci_index:
          registry: ${OCI_IMAGE_REGISTRY}
          image: ${OCI_IMAGE_REPOSITORY}
          tag: ${TF_VERSION}${CIRCLE_PULL_REQUEST:+-ra-${CIRCLE_PULL_REQUEST##*/}}-gpu

python-versions: &python-versions
  - "3.8.19"
  - "3.9.19"
  - "3.10.15"
  - "3.11.10"

workflows:
  build:
    jobs:
      - build-and-push-base:
          name: Building the base image
      - build-and-push-python:
          name: Python << matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
          requires:
            - Building the base image
      - build-and-push-python-datascience:
          name: Python Datascience << matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
          requires:
            - Python << matrix.python-version >>

      - build-and-push-gpu:
          name: Tensorflow 2.9
          cuda-tag: "11.4.3-runtime-ubuntu20.04"
          tf-version: "2.9.1"
          python-version: "3.8"
      - build-and-push-gpu:
          name: Tensorflow 2.11
          cuda-tag: "11.4.3-runtime-ubuntu20.04"
          tf-version: "2.11.1"
          python-version: "3.10"
      - build-and-push-gpu:
          name: Tensorflow 2.15
          cuda-tag: "12.2.2-runtime-ubuntu22.04"
          tf-version: "2.15.0"
          python-version: "3.11"
